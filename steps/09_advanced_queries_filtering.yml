id: advanced_queries_filtering
learningObjectives:
  - Use advanced queries to filter and sort data.
hints:
  - Wondering how filters work? [This
    article](https://firebase.google.com/docs/firestore/query-data/order-limit-data)
    explains ordering and filtering.
  - Learn more about compound queries in this [Firestore
    guide](https://firebase.google.com/docs/firestore/query-data/queries#compound_queries).
startFlow:
  do:
    - actionId: bot_message
      params:
        person: lucca
        messages:
          - text: >-
              Enhance the appâ€™s searchability with advanced filtering. Modify
              `getFilteredRestaurants` for dynamic query construction:

              ```javascript

              FriendlyEats.prototype.getFilteredRestaurants = function(filters, renderer) {
                var query = firebase.firestore().collection('restaurants');
                if (filters.category !== 'Any') query = query.where('category', '==', filters.category);
                if (filters.city !== 'Any') query = query.where('city', '==', filters.city);
                if (filters.price !== 'Any') query = query.where('price', '==', filters.price.length);
                if (filters.sort === 'Rating') query = query.orderBy('avgRating', 'desc');
                else if (filters.sort === 'Reviews') query = query.orderBy('numRatings', 'desc');
                this.getDocumentsInQuery(query, renderer);
              };

              ```

              This implementation creates compound queries by combining multiple where filters with orderBy clauses. Test the filtering by price, city, and category in your browser.

              Note: You'll see console errors about missing indexes - this is expected! Cloud Firestore requires indexes for compound queries to maintain performance. Simply click the provided error links to create necessary indexes in the Firebase Console.

              The error message will look like:
              "The query requires an index. You can create it here: https://console.firebase.google.com/project/..."

              These indexes are crucial for maintaining Firestore's performance at scale.
    - actionId: ready_message
      params:
        person: lucca
trigger:
  type: user_ready_response
  flowNode:
    do:
      - actionId: finish_step
